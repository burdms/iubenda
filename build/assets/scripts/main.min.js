function compilance() {
  const amount = document.querySelector('.compilance__amount'),
    circle = document.querySelector('.compilance-indicator__ring'),
    circumfirence = 2 * Math.PI * circle.r.baseVal.value;

  circle.style.strokeDasharray = `${circumfirence} ${circumfirence}`;
  circle.style.strokeDashoffset = circumfirence;

  const setProgress = percent => {
    amount.textContent = percent;

    circle.style.strokeDashoffset = circumfirence - percent / 100 * circumfirence;
  };

  // That's made just for... fun, I guess : )
  let z = 29;
  setProgress(z);

  circle.addEventListener('click', e => {
    if (e.target.classList.contains('compilance-indicator__ring')) {
      z = z === 100 ? 0 : z + 1;

      setProgress(z);
    }
  });
}
function toggleNotification(notification) {
  notification.classList.toggle('active');
}
function setSelected(select, target, reset = false) {
  select.querySelector('.select-list').classList.toggle('active');

  if (target.classList.contains('select-list__item')) {
    select.querySelector('.select__selected > img').setAttribute('src', target.querySelector('img').src);
    select.querySelector('.select__selected > img').setAttribute('alt', target.querySelector('img').alt);

    select.querySelector('input').value = target.querySelector('img').alt;
  }

  if (reset) {
    select.querySelector('.select-list').classList.remove('active');
  }
}
function postData(body) {
  return fetch('https://jsonplaceholder.typicode.com/posts', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(body),
  });
}

function form() {
  const form = document.querySelector('form');

  const toggleSection = target => {
    const block = target.closest('.js-calc-section').querySelector('.js-calc-block');

    if (target.checked) {
      block.classList.add('active');
    } else {
      block.classList.remove('active');
    }
  };

  form.addEventListener('change', e => {
    if (e.target.closest('.js-calc-switcher')) {
      toggleSection(e.target);
    }
  });

  form.addEventListener('reset', () => {
    setTimeout(() => {
      document.querySelectorAll('.js-calc-switcher').forEach(item => {
        toggleSection(item.querySelector('input'));
      });

      if (form.querySelector('.select')) {
        form.querySelectorAll('.select').forEach(item => {
          setSelected(item, item.querySelectorAll('.select-list__item')[0], true);
        });
      }
    }, 0);
  });

  form.addEventListener('submit', e => {
    e.preventDefault();

    const overlay = document.querySelector('.overlay'),
      overlayText = overlay.querySelector('.overlay-data__text');

    const formData = new FormData(form),
      body = {};

    const toDel = [];
    let banner = false,
      privacy = false;

    overlay.classList.add('active');

    for (const pair of formData.entries()) {
      if (pair[0] === 'banner') {
        banner = true;
      }

      if (pair[0] === 'privacy') {
        privacy = true;
      }
    }

    if (!banner) {
      for (const pair of formData.entries()) {
        if (pair[0].match(/banner/g)) {
          toDel.push(pair[0]);
        }
      }
    }

    if (!privacy) {
      for (const pair of formData.entries()) {
        if (pair[0].match(/privacy/g)) {
          toDel.push(pair[0]);
        }
      }
    }

    toDel.forEach(item => {
      formData.delete(item);
    });

    formData.forEach((value, key) => {
      body[key] = value;
    });

    postData(body)
      .then(response => {
        if (response.status !== 201) {
          throw new Error('Network status is not 201');
        }

        return response.json();
      })
      .then(data => {
        setTimeout(() => {
          overlay.classList.add('loaded');

          overlayText.textContent = 'Yay! Your data has been submitted. You can find it in the console!';

          console.group('Posted data');
          console.log(data);
          console.groupEnd();
        }, 2000);
      })
      .catch(error => {
        console.error(error);

        overlay.classList.add('loaded');

        overlayText.textContent = 'Ops! Something went wrong. You can find error description in the console!';
      })
      .finally(() => {
        overlay.addEventListener('click', () => {
          overlay.classList.remove('active', 'loaded');
        });
      });
  });
}

window.addEventListener("DOMContentLoaded", () => {
  const circleSize = () => {
    document.querySelector('.compilance-indicator')
      .querySelectorAll('circle')
      .forEach(item => {
        item.setAttribute('stroke-width', window.matchMedia(`(max-width: 1280px)`).matches ? '4' : '8');
        item.setAttribute('r', window.matchMedia(`(max-width: 1280px)`).matches ? '26' : '58');
      });
  };

  let screenFlag = window.matchMedia(`(max-width: 1280px)`).matches;

  window.addEventListener('resize', () => {
    if (screenFlag !== window.matchMedia(`(max-width: 1280px)`).matches) {
      screenFlag = window.matchMedia(`(max-width: 1280px)`).matches;

      circleSize();

      compilance();
    }
  });

  document.addEventListener('click', e => {
    // Large notification banner
    if (e.target.classList.contains('notification__close')) {
      toggleNotification(e.target.closest('.notification'));
    }

    // Select (s.a. select position)
    if (e.target.closest('.select')) {
      const select = document.querySelector('.select');

      setSelected(select, e.target);
    }

    // Tooltips
    if (e.target.closest('.js-tooltip-link')) {
      const tooltip = e.target.closest('.js-tooltip-parent').querySelector('.js-tooltip-item');

      tooltip.classList.toggle('active');

      setTimeout(() => {
        tooltip.classList.remove('active');
      }, 10000);
    }
  });

  circleSize();
  compilance();
  form();
});
//# sourceMappingURL=main.min.js.map
