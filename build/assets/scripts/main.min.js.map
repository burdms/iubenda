{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["function compilance() {\r\n  const amount = document.querySelector('.compilance__amount'),\r\n    circle = document.querySelector('.compilance-indicator__ring'),\r\n    circumfirence = 2 * Math.PI * circle.r.baseVal.value;\r\n\r\n  circle.style.strokeDasharray = `${circumfirence} ${circumfirence}`;\r\n  circle.style.strokeDashoffset = circumfirence;\r\n\r\n  const setProgress = percent => {\r\n    amount.textContent = percent;\r\n\r\n    circle.style.strokeDashoffset = circumfirence - percent / 100 * circumfirence;\r\n  };\r\n\r\n  // That's made just for... fun, I guess : )\r\n  let z = 29;\r\n  setProgress(z);\r\n\r\n  circle.addEventListener('click', e => {\r\n    if (e.target.classList.contains('compilance-indicator__ring')) {\r\n      z = z === 100 ? 0 : z + 1;\r\n\r\n      setProgress(z);\r\n    }\r\n  });\r\n}\r\nfunction toggleNotification(notification) {\r\n  notification.classList.toggle('active');\r\n}\r\nfunction setSelected(select, target, reset = false) {\r\n  select.querySelector('.select-list').classList.toggle('active');\r\n\r\n  if (target.classList.contains('select-list__item')) {\r\n    select.querySelector('.select__selected > img').setAttribute('src', target.querySelector('img').src);\r\n    select.querySelector('.select__selected > img').setAttribute('alt', target.querySelector('img').alt);\r\n\r\n    select.querySelector('input').value = target.querySelector('img').alt;\r\n  }\r\n\r\n  if (reset) {\r\n    select.querySelector('.select-list').classList.remove('active');\r\n  }\r\n}\r\nfunction postData(body) {\r\n  return fetch('https://jsonplaceholder.typicode.com/posts', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(body),\r\n  });\r\n}\r\n\r\nfunction form() {\r\n  const form = document.querySelector('form');\r\n\r\n  const toggleSection = target => {\r\n    const block = target.closest('.js-calc-section').querySelector('.js-calc-block');\r\n\r\n    if (target.checked) {\r\n      block.classList.add('active');\r\n    } else {\r\n      block.classList.remove('active');\r\n    }\r\n  };\r\n\r\n  form.addEventListener('change', e => {\r\n    if (e.target.closest('.js-calc-switcher')) {\r\n      toggleSection(e.target);\r\n    }\r\n  });\r\n\r\n  form.addEventListener('reset', () => {\r\n    setTimeout(() => {\r\n      document.querySelectorAll('.js-calc-switcher').forEach(item => {\r\n        toggleSection(item.querySelector('input'));\r\n      });\r\n\r\n      if (form.querySelector('.select')) {\r\n        form.querySelectorAll('.select').forEach(item => {\r\n          setSelected(item, item.querySelectorAll('.select-list__item')[0], true);\r\n        });\r\n      }\r\n    }, 0);\r\n  });\r\n\r\n  form.addEventListener('submit', e => {\r\n    e.preventDefault();\r\n\r\n    const overlay = document.querySelector('.overlay'),\r\n      overlayText = overlay.querySelector('.overlay-data__text');\r\n\r\n    const formData = new FormData(form),\r\n      body = {};\r\n\r\n    const toDel = [];\r\n    let banner = false,\r\n      privacy = false;\r\n\r\n    overlay.classList.add('active');\r\n\r\n    for (const pair of formData.entries()) {\r\n      if (pair[0] === 'banner') {\r\n        banner = true;\r\n      }\r\n\r\n      if (pair[0] === 'privacy') {\r\n        privacy = true;\r\n      }\r\n    }\r\n\r\n    if (!banner) {\r\n      for (const pair of formData.entries()) {\r\n        if (pair[0].match(/banner/g)) {\r\n          toDel.push(pair[0]);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!privacy) {\r\n      for (const pair of formData.entries()) {\r\n        if (pair[0].match(/privacy/g)) {\r\n          toDel.push(pair[0]);\r\n        }\r\n      }\r\n    }\r\n\r\n    toDel.forEach(item => {\r\n      formData.delete(item);\r\n    });\r\n\r\n    formData.forEach((value, key) => {\r\n      body[key] = value;\r\n    });\r\n\r\n    postData(body)\r\n      .then(response => {\r\n        if (response.status !== 201) {\r\n          throw new Error('Network status is not 201');\r\n        }\r\n\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        setTimeout(() => {\r\n          overlay.classList.add('loaded');\r\n\r\n          overlayText.textContent = 'Yay! Your data has been submitted. You can find it in the console!';\r\n\r\n          console.group('Posted data');\r\n          console.log(data);\r\n          console.groupEnd();\r\n        }, 2000);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n\r\n        overlay.classList.add('loaded');\r\n\r\n        overlayText.textContent = 'Ops! Something went wrong. You can find error description in the console!';\r\n      })\r\n      .finally(() => {\r\n        overlay.addEventListener('click', () => {\r\n          overlay.classList.remove('active', 'loaded');\r\n        });\r\n      });\r\n  });\r\n}\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", () => {\r\n  const circleSize = () => {\r\n    document.querySelector('.compilance-indicator')\r\n      .querySelectorAll('circle')\r\n      .forEach(item => {\r\n        item.setAttribute('stroke-width', window.matchMedia(`(max-width: 1280px)`).matches ? '4' : '8');\r\n        item.setAttribute('r', window.matchMedia(`(max-width: 1280px)`).matches ? '26' : '58');\r\n      });\r\n  };\r\n\r\n  let screenFlag = window.matchMedia(`(max-width: 1280px)`).matches;\r\n\r\n  window.addEventListener('resize', () => {\r\n    if (screenFlag !== window.matchMedia(`(max-width: 1280px)`).matches) {\r\n      screenFlag = window.matchMedia(`(max-width: 1280px)`).matches;\r\n\r\n      circleSize();\r\n\r\n      compilance();\r\n    }\r\n  });\r\n\r\n  document.addEventListener('click', e => {\r\n    // Large notification banner\r\n    if (e.target.classList.contains('notification__close')) {\r\n      toggleNotification(e.target.closest('.notification'));\r\n    }\r\n\r\n    // Select (s.a. select position)\r\n    if (e.target.closest('.select')) {\r\n      const select = document.querySelector('.select');\r\n\r\n      setSelected(select, e.target);\r\n    }\r\n\r\n    // Tooltips\r\n    if (e.target.closest('.js-tooltip-link')) {\r\n      const tooltip = e.target.closest('.js-tooltip-parent').querySelector('.js-tooltip-item');\r\n\r\n      tooltip.classList.toggle('active');\r\n\r\n      setTimeout(() => {\r\n        tooltip.classList.remove('active');\r\n      }, 10000);\r\n    }\r\n  });\r\n\r\n  circleSize();\r\n  compilance();\r\n  form();\r\n});"],"file":"main.min.js"}